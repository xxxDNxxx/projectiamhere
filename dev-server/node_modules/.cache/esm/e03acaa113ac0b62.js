let mongoose,StringUtil,bcrypt;_13a‍.x([["default",()=>_13a‍.o]]);_13a‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_13a‍.w("../utillities/string-util",[["StringUtil",["StringUtil"],function(v){StringUtil=v}]]);_13a‍.w("bcrypt-nodejs",[["default",["bcrypt"],function(v){bcrypt=v}]]);



const adminSchema = new mongoose.Schema({
    username: String,
    password: String,
    firstname: String,
    lastname: String

})
adminSchema.virtual('fullname').get(function() {
    const firstname = StringUtil.capitalize(this.firstname.toLowerCase())
    const lastname = StringUtil.capitalize(this.lastname.toLowerCase())
    return `${firstname} ${lastname}`
})
adminSchema.statics.passwordMatches = function(password, hash) {
    return bcrypt.compareSync(password, hash)
}
adminSchema.pre('save', function(next) {
    this.username = this.username.toLowerCase()
    this.firstname = this.firstname.toLowerCase()
    this.lastname = this.lastname.toLowerCase()
    const unsafePassword = this.password
    this.password = bcrypt.hashSync(unsafePassword)
    next()
})

_13a‍.d(mongoose.model('admins', adminSchema));